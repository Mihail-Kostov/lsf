################################################################################
# Array Library                                                                #
################################################################################
#
# Libreria contenente definizioni e funzioni per la manipolazione di array.
#
# Copyright (C) 2010 - Luigi Capraro (luigi.capraro@gmail.com)
#

# Crea un array.
#
# ES.
# > array_create ARRAY_NAME
#
array_create()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1
	
	declare -g -a $VAR_NAME
	
	return 0
}

# Distrugge un array.
#
# ES.
# > ARRAY_NAME=()
# > array_destroy ARRAY_NAME
#
array_destroy()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1

	unset $VAR_NAME
	
	return 0
}

# Restituisce la definizione dell'array nell'ambiente corrente.
#
# ES.
# > array_set ARRAY_NAME 'item 0' 'item 4' 'item 7'
# > array_def ARRAY_NAME
#   ARRAY_NAME=( [0]='item 0' [4]='item 4' [7]='item 7' )
#
array_def()
{
	[ $# -gt 0 ] || return 2
	
	local def="$(set | grep "^$1=(.*)")"

	[ -n "$def" ] || return 1
	
	echo $def
	
	return 0
}

# Restituisce gli indici della posizioni effettivamente occupate dell'array.
#
# ES.
# > ARRAY_NAME=( [0]='item 1' [4]='item 2' [7]='item 3' )
# > array_keyset ARRAY_NAME
#   0
#   4
#   7
#
# > ARRAY_NAME=( [0]='item 1' [4]='item 2' [7]='item 3' )
# > array_keyset ARRAY_NAME INDEXES
# > for INDEX in "${INDEXES[@]}"; do echo $INDEX; done
#   0
#   4
#   7
#
array_keyset()
{
	[ $# -gt 0 ] || return 2
	
	local ARRAY_VAR="$1"
	local KEY_SET_VAR="$2"
	
	if [ -z "$KEY_SET_VAR" ]; then
		array_def $ARRAY_VAR | grep -o -E -e "\[[^]]+\]" | 
		awk '{gsub("[[]|[]]",""); print}'
	else
		eval "$KEY_SET_VAR=( `array_keyset $ARRAY_VAR` )"
	fi
}

# Restituisce i valori di un array con quoting.
#
# ES.
# > ARRAY_NAME=( 'item 1' 'item 2' 'item 3' )
# > array_values ARRAY_NAME
#   'item 1' 'item 2' 'item 3'
#
array_values()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1

	eval "for val in \"\${${VAR_NAME}[@]}\"; do echo \\\"\$val\\\"; done"
}

# Restituisce il valore di un array nella posizione specificata.
#
# ES.
# > ARRAY_NAME=( item1 item2 item3 item4 item5 )
# > array_get ARRAY_NAME 5
#   item5
#
array_get()
{
	[ $# -gt 1 ] || return 1
	
	local VAR_NAME=$1
	local i=$2
	
	array_is_empty $VAR_NAME && return 1
	
	if [ $i -lt 0 ]; then
		i=$(( $(array_size $VAR_NAME) + $i ))
		[ $i -lt 0 ] && return 1
	fi
	
	eval "echo \${${VAR_NAME}[$i]}"
	
	return 0
}

# Imposta il valore di un array nella posizione specificata.
#
# ES.
# > ARRAY_NAME=( )
# > array_set ARRAY_NAME 5 "item5"
# > array_get ARRAY_NAME 5
#	item5
#
array_set()
{
	[ $# -gt 2 ] || return 1
	
	local VAR_NAME=$1
	local i=$2
	local new_val="$3"
	
	if [ $i -lt 0 ]; then
		i=$(( $(array_size $VAR_NAME) + $i ))
		[ $i -lt 0 ] && return 1
	fi
	
	eval "$VAR_NAME[$i]=\"$new_val\""
	
	return 0
}

# Rimuove il valore di un array nella posizione specificata.
#
# ES.
# > ARRAY_NAME=( item1 item2 item3 )
# > array_remove_item ARRAY_NAME 2
# > array_get ARRAY_NAME
#   item1 item3
# > array_get ARRAY_NAME 2
#   (empty string)
#
array_remove()
{
	[ $# -gt 1 ] || return 1
	
	local VAR_NAME=$1
	local i=$2
	
	array_is_empty $VAR_NAME && return 1
	
	if [ $i -lt 0 ]; then
		i=$(( $(array_size $VAR_NAME) + $i ))
		[ $i -lt 0 ] && return 1
	fi
	
	eval "unset $VAR_NAME[$i]"
	
	return 0
}

# Rimuove tutte le occorrenze di un certo valore dall'array.
array_remove_value()
{
	[ $# -gt 1 ] || return 1
	
	array_is_empty $VAR_NAME && return 0
	
	for i in $(array_index_of $1 "$2"); do
		array_remove_item $1 $i
	done
	
	return 0
}

# Rimuove tutti i valore di un array.
#
# ES.
# > ARRAY_NAME=( item1 item2 item3 )
# > array_clear ARRAY_NAME
# > array_get ARRAY_NAME
#   (empty string)
#
array_clear()
{
	[ $# -gt 0 ] || return 1
	
	eval "$1=( )"
	
	return 0
}

# Restituisce la dimensione di un array.
#
# ES.
# > ARRAY_NAME=( item1 item2 item3 )
# > array_length ARRAY_NAME
#   3
#
array_size()
{
	[ $# -gt 0 ] || return 1

	eval "echo \${#$1[@]}"
	
	return 0
}

alias array_length=array_size

# Restituisce un exit code pari a 0 se l'array Ã¨ vuoto, altrimenti 1.
#
# ES.
# > ARRAY_NAME=( )
# > array_is_empty ARRAY_NAME
# > echo $?
#   0
#
# > ARRAY_NAME=( item1 )
# > array_is_empty ARRAY_NAME
# > echo $?
#   1
#
array_is_empty()
{
	[ $# -gt 0 ] || return 2

	[ $(array_size $1) -eq 0 ] && return 0
	
	return 1
}

# Restituisce 0 se l'array contiene l'elemento specificato, altrimenti 1.
#
# > ARRAY_NAME=( item1 item2 item3 )
# > array_contains ARRAY_NAME item3
# > echo $?
#   0
#
# > array_contains ARRAY_NAME item5
# > echo $?
#   1
#
array_contains()
{
	[ $# -gt 1 ] || return 1
	
	array_values $1 | grep --quiet "'$2'"
	
	return $?
}

# Restituisce l'indice, o gli indici, associati al valore passato come paramentro 
# dell'array.
array_index_of()
{
	[ $# -gt 1 ] || return 1

	array_def $1 | grep -o -E -e "[[][0-9]+[]]=\"$2\"" | awk '{gsub("[[]|[]]=.*",""); print}'
}

# Restituisce il numero di occorrenze nell'array del valore passato come parametro.
array_occurrences_of()
{
	[ $# -gt 1 ] || return 1

	array_index_of $1 "$2" | wc -l
}

# Ritorna il primo indice libero dell'array.
array_free_index()
{
	[ $# -gt 0 ] || return 1
	
	declare -i index=0
	
	for i in $(array_keyset $1); do
		[ $index -ne $i ] && break
		let index++
	done
	
	echo $index
}

# Aggiunge l'elemento nella prima posizione libero dell'array.
array_add()
{
	[ $# -gt 1 ] || return 1
	
	array_set $1 $(array_free_index $1) "$2"
}

# Aggiunge tutti gli elementi passati come parametri ad un array.
#
# ES.
# > ARRAY_NAME=()
# > array_set ARRAY_NAME item1 item2 item3
#
array_add_all()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1
	shift
	
	for item in "$@"; do
		array_add $VAR_NAME $item
	done
	
	return 0
}

# Imposta un array.
#
# ES.
# > ARRAY_NAME=()
# > array_set ARRAY_NAME item1 item2 item3
#
array_set_all()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1
	shift
	
	eval "$VAR_NAME=( "$@" )"
	
	return 0
}


# Se l'array ha elementi in posizioni sparse tali da lasciare posizioni vuoti,
# allora compatta l'array.
#
# > ARRAY_NAME=( [1]=item1 [3]=item3 )
# > array_get ARRAY_NAME 0
#   (empty string)
# > array_get ARRAY_NAME 1
#   item0 
# > array_get ARRAY_NAME 2
#   (empty string)
# > array_get ARRAY_NAME 3
#   item3
#
# > array_compact ARRAY_NAME 
#
# > array_get ARRAY_NAME 0
#   item1
# > array_get ARRAY_NAME 1
#   item3 
# > array_get ARRAY_NAME 2
#   (empty string)
# > array_get ARRAY_NAME 3
#   (empty string)
# 
array_compact()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1

	eval "${VAR_NAME}=( $(array_values ${VAR_NAME} ) )"
}

# Trasforma un array in un insieme, eliminando i duplicati e ordinando gli elementi.
array_to_set()
{
	[ $# -gt 0 ] || return 1
	
	local ARRAY_NAME=$1
		
	eval "$ARRAY_NAME=( $(set_values $ARRAY_NAME | sort | uniq ))"
	
	return 0
}

# Trasforma un array in una mappa.
array_to_map()
{
	[ $# -gt 0 ] || return 1
	
	local ARRAY_NAME=$1
	
	local def="$(array_def $ARRAY_NAME)"
	
	unset $ARRAY_NAME
	
	declare -g -A $ARRAY_NAME
	eval "$def"
	
	return 0
}

# Restituisce i valori di un array.
#
# ES.
# > ARRAY_NAME=( item1 item2 item3 )
# > array_get ARRAY_NAME
#   item1 item2 item3
#
array_to_string()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1
	
	eval "echo \"\${${VAR_NAME}[@]}\""
	
	return 0
}


