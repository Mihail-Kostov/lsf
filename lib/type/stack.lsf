################################################################################
# Stack Library                                                                #
################################################################################
#
# Libreria contenente definizioni e funzioni per la manipolazione di stack.
#
# Copyright (C) 2011 - Luigi Capraro (luigi.capraro@gmail.com)
#

lib_include type:array

# Crea uno stack.
#
# ES.
# > stack_create STACK_NAME
#
alias stack_create=array_create

# Distrugge uno stack.
#
# ES.
# > STACK_NAME=()
# > stack_destroy STACK_NAME
#
alias stack_destroy=array_destroy

# Imposta uno stack.
#
# ES.
# > STACK_NAME=()
# > stack_set STACK_NAME item1 item2 item3
#
alias stack_set_all=array_stack_all

# Restituisce la definizione dello stack nell'ambiente corrente.
#
# ES.
# > stack_set STACK_NAME 'item 0' 'item 4' 'item 7'
# > stack_def STACK_NAME
#   STACK_NAME=( [0]='item 0' [4]='item 4' [7]='item 7' )
#
alias stack_def=array_def

# Restituisce i valori di uno stack con quoting.
#
# ES.
# > STACK_NAME=( 'item 1' 'item 2' 'item 3' )
# > stack_values STACK_NAME
#   'item 1' 'item 2' 'item 3'
#
alias stack_values=array_values


# Restituisce la dimensione di uno stack.
#
# ES.
# > STACK_NAME=( item1 item2 item3 )
# > stack_size ARRAY_NAME
#   3
#
alias stack_size=array_size


# Rimuove tutti i valore di uno stack.
#
# ES.
# > STACK_NAME=( item1 item2 item3 )
# > stack_clear STACK_NAME
# > stack_get STACK_NAME
#   (empty string)
#
alias stack_clear=array_clear

# Restituisce un exit code pari a 0 se lo stack Ã¨ vuoto, altrimenti 1.
#
# ES.
# > STACK_NAME=( )
# > stack_is_empty STACK_NAME
# > echo $?
#   0
#
# > STACK_NAME=( item1 )
# > stack_is_empty STACK_NAME
# > echo $?
#   1
#
alias stack_is_empty=array_is_empty

# Restituisce 0 se lo stack contiene l'elemento specificato, altrimenti 1.
#
# > STACK_NAME=( item1 item2 item3 )
# > stack_contains STACK_NAME item3
# > echo $?
#   0
#
# > stack_contains STACK_NAME item5
# > echo $?
#   1
#
alias stack_contains=array_contains


# Trasforma uno stack in una mappa.
alias stack_to_map=array_to_map

# Trasforma il contenuto dello stack in una stringa.
alias stack_to_string=array_to_string


# Aggiunge il valore in testa allo stack.
#
# ES.
# > STACK_NAME=( item1 item2 item3 )
# > stack_remove_item STACK_NAME 2
# > stack_get STACK_NAME
#   item1 item3
# > stack_get_item STACK_NAME 2
#   (empty string)
#
stack_push()
{
	[ $# -gt 1 ] || return 1
	
	local STACK_NAME=$1
	local value=$2
	local i=$(stack_size $STACK_NAME)
	
	array_set $STACK_NAME $i "$value"
}

alias stack_add=stack_push

# Rimuove il valore in testa allo stack, se presente.
#
# ES.
# > STACK_NAME=( item1 item2 item3 )
# > stack_remove_item STACK_NAME 2
# > stack_get STACK_NAME
#   item1 item3
# > stack_get_item STACK_NAME 2
#   (empty string)
#
stack_pop()
{
	[ $# -gt 0 ] || return 1
	
	local STACK_NAME=$1
	
	array_is_empty $STACK_NAME && return 1

	local value=$( array_get $STACK_NAME -1 )
	
	array_remove $STACK_NAME -1
	
	[ -n "$value" ] && echo "$value"
}

alias stack_remove=stack_pop

# Restituisce il valore in testa allo stack, senza rimuoverlo.
stack_peek()
{
	[ $# -gt 0 ] || return 1
	
	local STACK_NAME=$1
	
	array_get $STACK_NAME -1
}

# Trasforma io stack in un array.
stack_to_array()
{
	[ $# -gt 1 ] || return 1
	
	return 0
}

