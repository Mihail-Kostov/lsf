################################################################################
# Map Library                                                                  #
################################################################################
#
# Libreria contenente definizioni e funzioni per la manipolazione di mappe.
#
# Copyright (C) 2010 - Luigi Capraro (luigi.capraro@gmail.com)
#

lib_include type:array

# Crea un mappa.
#
# ES.
# > map_create MAP_NAME
#
map_create()
{
	[ $# -gt 0 ] || return 1
	
	local VAR_NAME=$1
	
	declare -g -A $VAR_NAME
	
	return 0
}

# Distrugge una mappa.
#
# ES.
# > map_create  MAP_NAME
# > map_destroy MAP_NAME
#
# @see array_destroy
alias map_destroy=array_destroy


# Restituisce la definizione dell'mappa nell'ambiente corrente.
#
# ES.
# > map_set MAP_NAME 'item 0' 'item 4' 'item 7'
# > map_def MAP_NAME
#   MAP_NAME=( [0]='item 0' [4]='item 4' [7]='item 7' )
#
# @see array_def
alias map_def=array_def


# Restituisce il valore della mappa associato alla chiave passata come parametro.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_get MAP_NAME 'key 1'
#   'value 1'
#
map_get()
{
	[ $# -gt 1 ] || return 1
	
	local VAR_NAME="$1"
	local i="$2"
	
	array_is_empty $VAR_NAME && return 1
	
	eval "echo \${${VAR_NAME}[$i]}"
	
	return 0
}

# Inserisce nella mappa la coppia chiave-valore. Se esiste, viene sovrascritto
# il precendente valore.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key' 'value'
# > map_get MAP_NAME 'key'
#   'value'
# > map_put MAP_NAME 'key' 'new value'
#   'new value'
#
map_put()
{
	[ $# -gt 2 ] || return 1
	
	local VAR_NAME=$1
	local i=$2
	local new_val="$3"
		
	eval "$VAR_NAME[$i]=\"$new_val\""
	
	return 0
}


# Restituisce le chiavi di una mappa.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_put MAP_NAME 'key 2' 'value 2'
# > map_keyset MAP_NAME
#   "key 1"
#   "key 2"
#
# @see array_keyset
alias map_keyset=array_keyset

# Restituisce i valori di una mappa con quoting.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_put MAP_NAME 'key 2' 'value 2'
# > map_values MAP_NAME
#   "value 1"
#   "value 2"
#
# @see array_values
alias map_values=array_values

# Restituisce l'insieme delle chiavi.
#
# ES.
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_put MAP_NAME 'key 2' 'value 2'
# > map_entry_set MAP_NAME
#   key 1=value 1
#   key 2=value 2
#
map_entry_set()
{
	[ $# -gt 0 ] || return 1
	
	array_def $1 | awk '
	{ 
		sub("^.*=[(] *[[]\"", ""); 
		sub("\" *[)]$", ""); 
		gsub("\"[]]=\"", "="); 
		gsub("\" [[]\"","\n"); 
		print $0
	}'
}


# Restituisce la dimensione di una mappa.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_size MAP_NAME
#   1
# > map_remove MAP_NAME 'key 1'
# > map_size MAP_NAME
#   0
# @see array_remove
alias map_remove=array_remove


# Restituisce la dimensione di una mappa.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_put MAP_NAME 'key 2' 'value 2'
# > map_size MAP_NAME
#   2
# @see array_size
alias map_size=array_size


# Rimuove tutti i valore di un mappa.
#
# ES.
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_put MAP_NAME 'key 2' 'value 2'
# > map_size MAP_NAME
#   2
# > map_clear MAP_NAME
# > map_size MAP_NAME
#   0
# > map_get MAP_NAME
#   (empty string)
#
# @see array_clear
alias map_clear=array_clear

# Restituisce un exit code pari a 0 se la mappa Ã¨ vuota, altrimenti 1.
#
# ES.
# > map_create MAP_NAME
# > map_is_empty MAP_NAME
# > echo $?
#   0
#
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_is_empty MAP_NAME
# > echo $?
#   1
#
# @see array_is_empty
alias map_is_empty=array_is_empty

# Restituisce 0 se la mappa contiene l'elemento specificato, altrimenti 1.
#
# > map_create MAP_NAME
# > map_put MAP_NAME 'key3' 'value3'
# > map_contains_value MAP_NAME 'value3'
# > echo $?
#   0
#
# > map_contains_value MAP_NAME 'value5'
# > echo $?
#   1
#
# @see array_contains
alias map_contains_value=array_contains

# Restituisce 0 se la mappa contiene la chiave specificato, altrimenti 1.
#
# > map_create MAP_NAME
# > map_put MAP_NAME 'key 1' 'value 1'
# > map_contains_key MAP_NAME 'key 1'
# > echo $?
#   0
#
# > map_contains_key MAP_NAME 'key 2'
# > echo $?
#   1
#
map_contains_key()
{
	[ $# -gt 1 ] || return 1
	
	for key in $(map_keyset $1); do
		[ "'$2'" == "$key" ] && return 0
	done
	
	return 1
}

# Trasforma i valori di una mappa in un'array.
map_to_array()
{
	[ $# -gt 0 ] || return 1
	
	local MAP_NAME=$1
	
	local values="$(map_values $MAP_NAME)"
	
	unset $MAP_NAME
	
	declare -g -a $MAP_NAME
	
	eval "$MAP_NAME=( $values )"
	
	return 0
}

# Trasforma i valori di una mappa in un'insieme.
map_to_set()
{
	[ $# -gt 0 ] || return 1
	
	local MAP_NAME=$1
	
	local values="$(map_values $MAP_NAME)"
	
	unset $MAP_NAME
	
	declare -g -a $MAP_NAME
	
	eval "$MAP_NAME=( $(echo $values| sort | uniq ))"
	
	return 0
}

# Trasforma una mappa in una stringa.
#
# @see array_to_string
alias map_to_string=array_to_string


