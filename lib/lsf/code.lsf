################################################################################
# Library System Framework - Code Library                                      #
################################################################################
#
# Libreria contenente definizioni di funzioni che estendono quelle basi del
# framework LSF relative al parsing del codice, e per la definizione di alias,
# funzioni e variabili.
#
# Copyright (C) 2010 - Luigi Capraro (luigi.capraro@gmail.com)
#


### DEFINITION SECTION #########################################################

lib_def_list()
{
	[ $# -eq 0 ] && return 1
	
	local ARGS=$(getopt -o f:AFV -l file:,only-alias,only-functions,only-variables -- "$@")
	eval set -- $ARGS
	
	local _alias=1
	local _variables=1
	local _functions=1
	
	local LIB_FILE=""
	local FIND_OPT=""
	
	while true ; do
		case "$1" in
		-f|--file)           FIND_OPT="$1"                        ;shift ;;
		-A|--only-alias)     _alias=1; _functions=0; _variables=0 ;shift ;;
		-F|--only-functions) _alias=0; _functions=1; _variables=0 ;shift ;;
		-V|--only-variables) _alias=0; _functions=0; _variables=1 ;shift ;;
		--) shift;;
		*) break;;
		esac
	done
	
	local library="$1"
	LIB_FILE=$(lib_find $FIND_OPT $library)
	
	if [ -f "$LIB_FILE" ]; then
		__get_list()
		{
			cat "$1" | 
			awk '! /^[[:blank:]]*\#/ {gsub("^[[:blank:]]*",""); print}' |
			awk '
				/^[[:blank:]]*[a-zA-Z0-9_]+=/ {gsub("[[:blank:]]*|=.*",""); print "[VAR]",$0}
				/^[[:blank:]]*(function)?[[:blank:]]*[a-zA-Z0-9|_]+\(\)/ { gsub("function|[[:blank:]]*|\\(\\).*$",""); print "[FUN]",$0}
				/(alias)[[:blank:]]*[a-zA-Z0-9_]+=/ {gsub("=[^;]*","\n");  gsub("[^\n]*alias", "[ALS]");print}' |
			sort | uniq
		}
		
		__get_var_list()
		{
			__get_list "$1" | awk '/^\[VAR\]/ {print $2}'
		}
		
		__get_fun_list()
		{
			__get_list "$1" | awk '/^\[FUN\]/ {print $2}'
		}
		
		__get_alias_list()
		{
			__get_list "$1" | awk '/^\[ALS\]/ {print $2}'
		}
		
		__is_local_var()
		{
			cat "$1" | grep -q -E -e "local *$2 *($|=)|unset *$2 *($|;)?"
		}
		
		__is_local_fun()
		{
			cat "$1" | grep -q -E -e "unset *$2 *($|;)?"
		}
		
		__is_local_alias()
		{
			cat "$1" | grep -q -E -e "unalias *$2 *($|;)?"
		}
		
		if [ $_variables -eq 1 ]; then
			for var in $(__get_var_list "$LIB_FILE"); do
				
				if ! __is_local_var $LIB_FILE $var; then
					if [ $_functions -eq 1 -a $_alias -eq 1 ]; then
						echo -n "[VAR] "
					fi
					echo "$var"
				fi
			done
		fi
		
		if [ $_functions -eq 1 ]; then
			for fun in $(__get_fun_list "$LIB_FILE"); do
				
				if ! __is_local_fun $LIB_FILE $fun; then
					if [ $_variables -eq 1 -a $_alias -eq 1 ]; then
						echo -n "[FUN] "
					fi
					echo "$fun"
				fi
			done
		fi
		
		if [ $_alias -eq 1 ]; then
			for alias in $(__get_alias_list "$LIB_FILE"); do
				
				if ! __is_local_alias $LIB_FILE $alias; then
					if [ $_variables -eq 1 -a $_functions -eq 1 ]; then
						echo -n "[ALS] "
					fi
					echo "$alias"
				fi
			done
		fi
		
		unset __get_list
		unset __get_var_list
		unset __get_fun_list
		unset __get_alias_list
		unset __is_local_var
		unset __is_local_fun
		unset __is_local_alias
	else
		lib_log "Library '$library' not found!"
		return 1
	fi
	
	return 0
}


### FIND SECTION ###############################################################

lib_def_find()
{
	local ARGS=$(getopt -o edfmnhvAFVqtT -l help,file,only-enabled,only-disable,filename,libname,verbose,only-alias,only-variables,only-functions,quiet,print-type,no-print-type -- "$@")
	eval set -- $ARGS
	
	local FIND_OPT=
	local ONLY_ENABLED=0
	local ONLY_DISABLED=0
	local NAME=1
	local VERBOSE=0
	local QUIET=0
	local PRINT_TYPE=2
	local _alias=1
	local _variables=1
	local _functions=1
	
	while true ; do
		case "$1" in
		-A|--only-alias)     _alias=1; _functions=0; _variables=0 ;shift ;;
		-F|--only-functions) _alias=0; _functions=1; _variables=0 ;shift ;;
		-V|--only-variables) _alias=0; _functions=0; _variables=1 ;shift ;;
		-f|--file)           FIND_OPT="$1"   ; shift ;;
		-n|--libname)        NAME=1          ; shift ;;
		-m|--filename)       NAME=0          ; shift ;;
		-e|--only-enabled)   ONLY_ENABLED=1  ; shift ;;
		-d|--only-disabled)  ONLY_DISABLED=1 ; shift ;;
		-q|--quiet)          QUIET=1         ; shift ;;
		-v|--verbose)        VERBOSE=1       ; shift ;;
		-t|--print-type)     PRINT_TYPE=1    ; shift ;;
		-T|--no-print-type)  PRINT_TYPE=0    ; shift ;;
		-h|--help) echo "$FUNCNAME <options> [-r|--recursive] <dir>"; return 0;;
		--) shift;;
		*) break;;
		esac
	done
	
	local DEF_NAME="$1"
	shift
	
	local found=0
	local exit_code=1
	local s=$(echo $_alias $_functions $_variables | awk '{print $1+$2+$3}')
		
	if [ $PRINT_TYPE -eq 2 -a $s -eq 3 ]; then
		PRINT_TYPE=1
	fi
	
	__find_def()
	{
		local opt="$1"
		local library="$2"
		
		if [ "$opt" = "-A" -a $_alias     -eq 1 ] || 
		   [ "$opt" = "-F" -a $_functions -eq 1 ] || 
		   [ "$opt" = "-V" -a $_variables -eq 1 ]
		then
			for def in $(lib_def_list $opt -f $library); do
				if [ "$DEF_NAME" == $def ]; then
					
					if [ $QUIET -eq 0 ]; then
						if [ $VERBOSE -eq 1 ]; then
							echo -n "La definizione "
							case "$opt" in
							-V) echo -n "della variabile ";;
							-A) echo -n "dell'alias ";;
							-F) echo -n "della funzione ";;
							esac
							echo "'$DEF_NAME' e' stata trovata nella libreria: "
						elif [ $PRINT_TYPE -eq 1 ]; then
							case "$opt" in
							-V) echo -n "[VAR] ";;
							-A) echo -n "[ALS] ";;
							-F) echo -n "[FUN] ";;
							esac
						fi
						
						if [ $NAME -eq 1 ]; then
							echo "$( lib_name "$library")"
						else
							echo "$library"
						fi
					fi
					
					return 0
				fi
			done
		fi
		
		return 1
	}

	local libs=
	
	if [ $# -eq 0 ]; then
		libs="$(lib_list --no-format-list --filename)"
	else
		local lib=
		
		for lib in $@; do
			libs="$libs $(lib_find $FIND_OPT $lib)"
		done
	fi
	
	[ -n "$libs" ] || return 1
	
	for library in $libs; do
	
		__find_def -V "$library"; exit_code=$?; [ $exit_code -eq 0 ] && break
		__find_def -A "$library"; exit_code=$?; [ $exit_code -eq 0 ] && break
		__find_def -F "$library"; exit_code=$?; [ $exit_code -eq 0 ] && break
	done
	
	unset __find_def

	return $exit_code
}



lib_def_get()
{
	[ $# -eq 0 ] && return 1
	
	local ARGS=$(getopt -o hvAFVl:f: -l help,verbose,alias,variable,function,libname,libfile -- "$@")
	eval set -- $ARGS
		
	local DEF_NAME=""
	local LIB_FILE=""
	local VERBOSE=1
	local TYPE=""
	
	while true ; do
		case "$1" in
		-l|--libname) 	LIB_FILE=$(lib_find        $2) ; shift 2;;
		-f|--libfile)   LIB_FILE=$(lib_find --file $2) ; shift 2;;
		-A|--alias-name)    TYPE="-A"                  ; shift ;;
		-F|--function-name) TYPE="-F"                  ; shift ;;
		-V|--variable-name) TYPE="-V"                  ; shift ;;
		-h|--help) echo "$FUNCNAME [-A|-V|-F] <name> [-l|--libname] <libname>"
		           echo "$FUNCNAME [-A|-V|-F] <name> [-f|--libfile] <libfile>"
		           return 0;;
		--) shift;;
		*) break;;
		esac
	done
	
	DEF_NAME="$1"

	if [ -z "$LIB_FILE" ]; then
		LIB_FILE=$(lib_def_find --filename $TYPE $DEF_NAME)
		
		if [ -z "$TYPE" ]; then
			TYPE="$(echo "$LIB_FILE" | awk '{print $1}')"
			LIB_FILE="$(echo "$LIB_FILE" | awk '{print $2}')"

			case "$TYPE" in
			\[ALS\]) TYPE="-A";;
			\[FUN\]) TYPE="-F";;
			\[VAR\]) TYPE="-V";;
			esac
		fi
	fi
		
	[ -n "$LIB_FILE" ] || return 2
	[ -n "$TYPE"     ] || return 3

		
	__get_alias_def()
	{
		local ALIAS_NAME="$1"
		local LIB_FILE="$2"
		
		for a in $(lib_def_list -A -f "$LIB_FILE"); do
			if [ "$ALIAS_NAME" == "$a" ]; then
				
				cat $LIB_FILE  | grep -o -E -e "alias $ALIAS_NAME=([^'\";]+|'.+'|\".*\") *;?" | awk '{gsub(";$","");print}'
				
				return 0
			fi
		done
		
		return 1
	}
	
	__get_variable_def()
	{
		local VAR_NAME="$1"
		local LIB_FILE="$2"
		
		for v in $(lib_def_list -V -f "$LIB_FILE"); do
			if [ "$VAR_NAME" == "$v" ]; then
				eval "echo $VAR_NAME=\${$VAR_NAME}"
				
				return 0
			fi
		done
		
		return 1
	}
	
	__get_function_def()
	{
		local FUN_NAME="$1"
		local LIB_FILE="$2"

		echo "F=$FUN_NAME, LIB=$LIB_NAME, LINE=$LINE"
		
		local LINE=$(eval "cat $LIB_FILE  | awk '/^$FUN_NAME\(\)/ { print FNR}'");
		
		[ -n "$LINE" ] || return 1
		
		
		local VARS=$(cat $LIB_FILE  | awk -v CSTART=$LINE '
		BEGIN {CEND=0; PAR=0}; 
		CEND==0 && FNR>=CSTART && /\{/ {PAR=PAR+1}
		CEND==0 && FNR>=CSTART && /\}/ {PAR=PAR-1; if (PAR==0) {CEND=FNR}}
		END {printf "-v CSTART=%d -v CEND=%d\n", CSTART, CEND}')
		
		local CODE=$(cat $LIB_FILE | awk $VARS 'FNR>=CSTART && FNR<=CEND {print}')
		
		echo "$CODE"
		
		return 0	
	}
						
	case "$TYPE" in
	-A) __get_alias_def    $DEF_NAME $LIB_FILE;;
	-F) __get_function_def $DEF_NAME $LIB_FILE;;
	-V) __get_variable_def $DEF_NAME $LIB_FILE;;
	esac

	
	unset __get_alias_def
	unset __get_variable_def
	unset __get_function_def
	
	return 0
}


lib_def_get_description()
{
	[ $# -eq 0 ] && return 1
	
	local ARGS=$(getopt -o hvA:F:V: -l help,verbose,alias:,variable:,function: -- "$@")
	eval set -- $ARGS
	
	local LIB_FILE=""
	local FIND_OPT=""
	local VERBOSE=1
	local alias_name=""
	local variable_name=""
	local function_name=""

	while true ; do
		case "$1" in
		-f|--file)          FIND_OPT="$1"      ; shift  ;;
		-A|--alias-name)    alias_name="$2"    ; shift 2;;
		-F|--function-name) function_name="$2" ; shift 2;;
		-V|--variable-name) variable_name="$2" ; shift 2;;
		-h|--help) echo "$FUNCNAME <libname> [-A|-V|-F] <name>"
		           echo "$FUNCNAME [-f|--file] <libfile> [-A|-V|-F] <name>"
		           return 0;;
		--) shift;;
		*) break;;
		esac
	done
	
	local library="$1"
	local ITEM_REGEX=""
	
	if [ -n "$alias_name" ]; then
		ITEM_REGEX="alias *${alias_name} *="
		
		if [ -z "$library" ]; then
			library=$(lib_def_find --filename -A "$alias_name")
			FIND_OPT="--file"
		fi
		
	elif [ -n "$variable_name" ]; then
		ITEM_REGEX="${variable_name} *="
		
		if [ -z "$library" ]; then
			library=$(lib_def_find --filename -V "$variable_name")
			FIND_OPT="--file"
		fi
		
	elif [ -n "$function_name" ]; then
		ITEM_REGEX="${function_name}\(\)"
		
		if [ -z "$library" ]; then
			library=$(lib_def_find --filename -F "$function_name")
			FIND_OPT="--file"
		fi
	fi
	
	LIB_FILE=$(lib_find $FIND_OPT $library)
	
	if [ -f "$LIB_FILE" ]; then
		[ -n "$ITEM_REGEX" ] || return 3
		
		local LINE=$(eval "cat $LIB_FILE  | awk 'BEGIN { first=0 }; first==0 && /^ *$ITEM_REGEX/ { print FNR; first=1}'");

		[ -n "$LINE" ] || return 1
		
		local VARS=$(cat $LIB_FILE  | awk -v LINE=$LINE '
		BEGIN {CSTART=0; CEND=0; START=1}; 
		/^#/ && FNR<LINE {if (START==1) { CSTART=FNR; CEND=CSTART; START=0} else {CEND=FNR}}
		/^$/ && FNR<LINE {START=1}
		/^ *[^#]+/ && FNR<LINE {START=1; CSTART=0; CEND=0}
		END {printf "-v CSTART=%d -v CEND=%d\n", CSTART, CEND}')
		
		local DESC=$(cat $LIB_FILE | awk $VARS 'FNR>=CSTART && FNR<=CEND {gsub("^# *",""); print}')
		
		echo "$DESC"
		
		return 0
	fi
	
	return 2
}



### UNSET SECTION ##############################################################

lib_unset()
{
	local ARGS=$(getopt -o f -l file -- "$@")
	
	eval set -- $ARGS
	
	local options=""
	local libs=""
		
	while true ; do
		case "$1" in
		-f|--file) options="$1"; shift;;
		--) shift;;
		*) break;;
		esac
	done
	
	__lib_unset()
	{		
		local VAR_AND_FUN=$(lib_def_list $options $1 | 
			awk '{gsub("\\[(VAR|FUN)\\]","unset"); gsub("\\[ALS\\]","unalias"); printf "%s:%s\n",$1,$2}')
	
		if [ -n "$VAR_AND_FUN" ]; then
			lib_log "Library '$lib': unset variables, functions and alias"
		
			for def in $VAR_AND_FUN; do
				local CMD=$(echo $def | tr : ' ')
				
				[ "$CMD" != "unset PATH" ] || continue 
				[ "$CMD" != "unset PS1"  ] || continue
				[ "$CMD" != "unset PS2"  ] || continue
				[ "$CMD" != "unset PS3"  ] || continue
				
				lib_log "Library '$1': $CMD"
				eval "$CMD 2> /dev/null"
			done
		fi
	
		local lib="$(lib_find $options "$1")"
	
		__lib_list_files_remove "$lib"
	}
	
	if [ $# -eq 0 ]; then
		options="--file"
		libs="$(__lib_list_files)"
	else
		libs="$@"
	fi

	for libfile in $libs; do
		__lib_unset $libfile
	done
	
	unset __lib_unset
	
	return 0
}

